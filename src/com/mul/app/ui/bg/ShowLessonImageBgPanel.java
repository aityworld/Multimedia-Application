/*
 * bgEnterRegisterPanel.java
 *
 * Created on September 12, 2000, 11:02 AM
 */
package com.mul.app.ui.bg;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.net.URL;

/**
 *
 * @author  Aity
 */
public class ShowLessonImageBgPanel extends javax.swing.JPanel implements Runnable {

    private static Image agif;
    private static int aw, ah, cw;
    private int x;
    private BufferedImage bimg2;
    private static Color colors[] = {Color.blue, Color.cyan, Color.green,
        Color.magenta, Color.orange, Color.pink, Color.red,
        Color.yellow, Color.lightGray, Color.white};
    private Thread thread;
    private BufferedImage bimg;
    private Ellipse2D.Float[] ellipses;
    private double esize[];
    private float estroke[];
    private double maxSize;

    /** Creates new form bgEnterRegisterPanel */
    public ShowLessonImageBgPanel(String alphabel) {
        initComponents();
        agif = getDemoImage(alphabel);
        aw = agif.getWidth(this) / 2;
        ah = agif.getHeight(this) / 2;
        setBackground(Color.black);

        // an array of type Ellipse2D.Float
        ellipses = new Ellipse2D.Float[25];

        // a double array initialized to the length of the ellipses array
        esize = new double[ellipses.length];

        // a float array initialized to the length of the ellipses array
        estroke = new float[ellipses.length];

        // fills the ellipses array with Ellipse2D.Float objects
        for (int i = 0; i < ellipses.length; i++) {
            ellipses[i] = new Ellipse2D.Float();
            // gets location for each ellipse with the given random size
            getRandomXY(i, 20 * Math.random(), 200, 200);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        objLabel = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(535, 302));
        setMinimumSize(new java.awt.Dimension(535, 302));

        objLabel.setFont(new java.awt.Font("SimHei", 1, 30)); // NOI18N
        objLabel.setForeground(new java.awt.Color(255, 0, 0));
        objLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(objLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(objLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(253, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel objLabel;
    // End of variables declaration//GEN-END:variables
      /*
     * sets the bounds of the ellipse specified by i, using the given
     * width, height and random size.
     */
    public void getRandomXY(int i, double size, int w, int h) {
        esize[i] = size;
        estroke[i] = 1.0f;
        double x = Math.random() * (w - (maxSize / 2));
        double y = Math.random() * (h - (maxSize / 2));
        ellipses[i].setFrame(x, y, size, size);
    }


    /*
     * resets the bounds of the ellipses with the given width and height
     */
    public void reset(int w, int h) {
        maxSize = w / 10;
        for (int i = 0; i < ellipses.length; i++) {
            getRandomXY(i, maxSize * Math.random(), w, h);
        }
    }


    /*
     * increase each stroke size and ellipse size until maxSize
     */
    public void step(int w, int h) {
        for (int i = 0; i < ellipses.length; i++) {
            estroke[i] += 0.025f;
            esize[i]++;
            if (esize[i] > maxSize) {
                getRandomXY(i, 1, w, h);
            } else {
                ellipses[i].setFrame(ellipses[i].getX(), ellipses[i].getY(),
                        esize[i], esize[i]);
            }
        }
    }

    public void drawDemo(int w, int h, Graphics2D g2) {

        // sets the color and stroke size and draws each ellipse
        for (int i = 0; i < ellipses.length; i++) {
            g2.setColor(colors[i % colors.length]);
            g2.setStroke(new BasicStroke(estroke[i]));
            g2.draw(ellipses[i]);
        }

        if ((x -= 3) <= -cw) {
            x = w;
        }
        g2.drawImage(agif, w / 2 - aw, h / 2 - ah, this);
    }

    public Graphics2D createGraphics2D(int w, int h) {
        Graphics2D g2 = null;
        if (bimg == null || bimg.getWidth() != w || bimg.getHeight() != h) {
            bimg = (BufferedImage) createImage(w, h);
            reset(w, h);
        }
        g2 = bimg.createGraphics();
        g2.setBackground(getBackground());
        g2.clearRect(0, 0, w, h);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        return g2;
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Dimension d = getSize();
        step(d.width, d.height);
        Graphics2D g2 = createGraphics2D(d.width, d.height);
        drawDemo(d.width, d.height, g2);
        g2.dispose();
        g.drawImage(bimg, 0, 0, this);
    }

    public void start() {
        thread = new Thread(this);
        thread.setPriority(Thread.MIN_PRIORITY);
        //thread.start();
    }

    public synchronized void stop() {
        thread = null;
    }

    public Image getDemoImage(String name) {
        URL url = this.getClass().getResource("/com/mul/app/ui/resource/" + name + ".png");
        Image img = getToolkit().getImage(url);
        try {
            MediaTracker tracker = new MediaTracker(this);
            tracker.addImage(img, 0);
            tracker.waitForID(0);
        } catch (Exception e) {
        }
        return img;
    }

    public void run() {
        Thread me = Thread.currentThread();
        while (thread == me) {
            repaint();
            try {
                thread.sleep(10);
            } catch (InterruptedException e) {
                break;
            }
        }
        thread = null;
    }

    @Override
    public boolean imageUpdate(Image img, int infoflags,
            int x, int y, int width, int height) {
        if (isShowing() && (infoflags & ALLBITS) != 0) {
            repaint();
        }
        if (isShowing() && (infoflags & FRAMEBITS) != 0) {
            repaint();
        }
        return isShowing();
    }
}
